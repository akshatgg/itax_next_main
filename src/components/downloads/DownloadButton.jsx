// 'use client';

// import 'jspdf-autotable';
// import Button from '@/components/ui/Button';
// import { jsPDF } from 'jspdf';

// const DownloadButton = ({ id, fileName, results, title }) => {
//   const getBase64FromUrl = async (url) => {
//     const response = await fetch(url);
//     const blob = await response.blob();
//     return new Promise((resolve, reject) => {
//       const reader = new FileReader();
//       reader.onloadend = () => resolve(reader.result);
//       reader.onerror = reject;
//       reader.readAsDataURL(blob);
//     });
//   };
  
//   const exportPdf = async () => {
//     const doc = new jsPDF({ orientation: 'portrait' });

//     const logoBase64 = await getBase64FromUrl('/logo.png');
//     const logoWidth = 16; // mm
//     const logoHeight = 8; // mm
//     const pageWidth = doc.internal.pageSize.getWidth();
//     doc.addImage(
//       logoBase64,
//       'PNG',
//       (pageWidth - logoWidth) / 2,
//       10,
//       logoWidth,
//       logoHeight
//     );

//     const watermarkText = 'iTax-Easy';
//     doc.setFontSize(28);
//     doc.setTextColor(186, 230, 253); // Light blue color for watermark
//     if (doc.setGState) {
//       // jsPDF >=2.5.0
//       doc.setGState(new doc.GState({ opacity: 1.0}));
//     }
//     const pageHeight = doc.internal.pageSize.getHeight();
//     for (let y = 40; y < pageHeight; y += 60) {
//       // vertical spacing
//       for (let x = 0; x < pageWidth; x += 80) {
//         // horizontal spacing
//         doc.text(watermarkText, x + 15, y, { angle: 30 });
//       }
//     }
//     if (doc.setGState) {
//       doc.setGState(new doc.GState({ opacity: 1 }));
//     }
//     doc.setTextColor(41, 128, 185); // Reset color for header
//     doc.setFontSize(20); // Reset font size for header

//     // Add title
//     doc.setFontSize(16);
//     doc.setTextColor(0, 0, 0);
//     doc.text(
//       title || 'Calculation Results',
//       doc.internal.pageSize.width / 2,
//       35,
//       { align: 'center' },
//     );

//     // Add horizontal line
//     doc.setDrawColor(220, 220, 220);
//     doc.setLineWidth(0.5);
//     doc.line(15, 40, doc.internal.pageSize.width - 15, 40);

//     // Add date
//     doc.setFontSize(10);
//     doc.setTextColor(100, 100, 100); // Gray color
//     doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, 15, 50);

//     // Add results table
//     if (results && results.length > 0) {
//       const tableData = results.map((item) => {
//         // Format currency values if they contain ₹
//         const value = item.value.includes('₹')
//           ? item.value.replace('₹', '').trim() // Remove ₹ symbol and trim spaces
//           : item.value;
//         return [item.label, value];
//       });

//       doc.autoTable({
//         startY: 60,
//         head: [['Description', 'Value']],
//         body: tableData,
//         theme: 'grid',
//         headStyles: {
//           fillColor: [41, 128, 185],
//           textColor: 255,
//           fontSize: 12,
//           fontStyle: 'bold',
//           halign: 'left',
//         },
//         styles: {
//           fontSize: 11,
//           cellPadding: 5,
//           lineColor: [200, 200, 200],
//           lineWidth: 0.1,
//         },
//         columnStyles: {
//           0: {
//             cellWidth: 100,
//             fontStyle: 'normal',
//           },
//           1: {
//             cellWidth: 80,
//             halign: 'right',
//             fontStyle: (item) => {
//               // Make Total Interest and Final Amount bold
//               const label = tableData[item.row - 1]?.[0] || '';
//               return label.includes('Total') || label.includes('Final')
//                 ? 'bold'
//                 : 'normal';
//             },
//           },
//         },
//         alternateRowStyles: {
//           fillColor: [249, 249, 249],
//         },
//         margin: { left: 15, right: 15 },
//       });
//     } else {
//       // If no results provided, try to get from HTML table
//       doc.autoTable({
//         html: id,
//         startY: 60,
//         margin: { left: 15, right: 15 },
//       });
//     }

//     // Add footer
//     const pageCount = doc.internal.getNumberOfPages();
//     doc.setFontSize(8);
//     doc.setTextColor(150, 150, 150);
//     for (let i = 1; i <= pageCount; i++) {
//       doc.setPage(i);
//       doc.text(
//         'Generated by iTax Easy Calculator',
//         doc.internal.pageSize.width / 2,
//         doc.internal.pageSize.height - 10,
//         { align: 'center' },
//       );
//     }

//     doc.save(fileName);
//   };

//   return (
//     <Button onClick={exportPdf} size={'sm'}>
//       Download PDF
//     </Button>
//   );
// };

// export default DownloadButton;



// 'use client';

// import Button from '@/components/ui/Button';

// export default function DownloadPdfNoLib({ id, fileName = 'document', results = [], title = 'Calculation Results' }) {
//   // Turn /logo.png into a data URL so it embeds in the print tab
//   const toDataUrl = async (url) => {
//     try {
//       const abs = new URL(url, window.location.origin).href;
//       const res = await fetch(abs, { cache: 'no-store' });
//       const blob = await res.blob();
//       const reader = new FileReader();
//       return await new Promise((resolve, reject) => {
//         reader.onloadend = () => resolve(reader.result);
//         reader.onerror = reject;
//         reader.readAsDataURL(blob);
//       });
//     } catch {
//       return ''; // if logo fails, we just skip it
//     }
//   };

//   // Build a tiled SVG watermark as a CSS background image
//   const buildWatermarkDataUri = (text = 'iTax-Easy') => {
//     const svg = `
//       <svg xmlns='http://www.w3.org/2000/svg' width='280' height='180'>
//         <defs>
//           <linearGradient id='g' x1='0' x2='1' y1='0' y2='1'>
//             <stop offset='0' stop-color='rgb(186,230,253)' stop-opacity='0.20'/>
//             <stop offset='1' stop-color='rgb(186,230,253)' stop-opacity='0.20'/>
//           </linearGradient>
//         </defs>
//         <rect width='100%' height='100%' fill='transparent'/>
//         <g transform='rotate(-30,140,90)'>
//           <text x='20' y='95' font-family='Arial, Helvetica, sans-serif' font-size='34' fill='url(#g)'>
//             ${text}
//           </text>
//         </g>
//       </svg>`;
//     return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;
//   };

//   const escapeHtml = (s = '') =>
//     String(s)
//       .replace(/&/g, '&amp;')
//       .replace(/</g, '&lt;')
//       .replace(/>/g, '&gt;')
//       .replace(/"/g, '&quot;');

//   // If results are provided, render a 2-col table. Otherwise, clone from DOM (id).
//   const buildTableHtml = () => {
//     if (Array.isArray(results) && results.length) {
//       const rows = results
//         .map((r) => {
//           const label = escapeHtml(r.label ?? '');
//           const value = escapeHtml(r.value ?? '');
//           const isStrong = /total|final/i.test(label);
//           return `<tr>
//             <td>${label}</td>
//             <td class="val ${isStrong ? 'strong' : ''}">${value}</td>
//           </tr>`;
//         })
//         .join('');
//       return `
//         <table class="tbl">
//           <thead><tr><th>Description</th><th>Value</th></tr></thead>
//           <tbody>${rows}</tbody>
//         </table>`;
//     }
//     // Clone an existing table from the current page (simple, safe subset)
//     if (typeof document !== 'undefined' && id) {
//       const el = document.querySelector(id);
//       if (el && el.tagName?.toLowerCase() === 'table') {
//         return `<div class="html-wrap">${el.outerHTML}</div>`;
//       }
//     }
//     return `<div class="empty">No data</div>`;
//   };

//   const fmtDate = (d = new Date()) =>
//     new Date(d).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' });

//   const buildHtml = ({ logoDataUrl, wmDataUrl }) => {
//     const tableHtml = buildTableHtml();
//     const css = `
//       @page { size: A4; margin: 14mm; }
//       * { box-sizing: border-box; }
//       html, body { height: 100%; }
//       body {
//         font: 12.5px/1.35 "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
//         color: #111827;
//         -webkit-print-color-adjust: exact;
//         print-color-adjust: exact;
//       }
//       .wm {
//         position: fixed;
//         inset: 0;
//         background-image: url('${wmDataUrl}');
//         background-size: 280px 180px;
//         background-repeat: repeat;
//         z-index: -1;
//       }
//       .sheet { width: 100%; }
//       .header {
//         text-align: center;
//         margin-bottom: 10px;
//       }
//       .logo { height: 28px; display: inline-block; margin-top: 6px; }
//       .title {
//         font-size: 16px; font-weight: 700; margin: 10px 0 4px;
//       }
//       .date {
//         font-size: 10px; color: #6b7280; margin-bottom: 8px;
//       }
//       .rule {
//         height: 1px; background: #e5e7eb; border: 0; margin: 8px 0 12px;
//       }
//       .tbl {
//         width: 100%;
//         border-collapse: collapse;
//       }
//       .tbl thead th {
//         background: #2980b9;
//         color: #fff;
//         text-align: left;
//         font-weight: 700;
//         padding: 6px 8px;
//         border: 1px solid #d0d7de;
//       }
//       .tbl td {
//         border: 1px solid #e5e7eb;
//         padding: 6px 8px;
//         vertical-align: top;
//       }
//       .tbl td.val { text-align: right; }
//       .tbl tbody tr:nth-child(odd) td { background: #f9fafb; }
//       .strong { font-weight: 700; }
//       .footer {
//         position: fixed;
//         bottom: 8mm; left: 0; right: 0;
//         text-align: center;
//         font-size: 10px; color: #9ca3af;
//       }
//       .footer .pnums:after {
//         content: counter(page) " / " counter(pages);
//       }
//       .brand { color: #64748b; }
//       .html-wrap table {
//         width: 100%;
//         border-collapse: collapse;
//       }
//       .html-wrap th, .html-wrap td {
//         border: 1px solid #e5e7eb; padding: 6px 8px;
//       }
//       @media print {
//         .noprint { display: none !important; }
//       }
//     `;

//     return `<!doctype html>
// <html>
//   <head>
//     <meta charset="utf-8"/>
//     <title>${escapeHtml(fileName)}</title>
//     <style>${css}</style>
//   </head>
//   <body>
//     <div class="wm"></div>
//     <div class="sheet">
//       <div class="header">
//         ${logoDataUrl ? `<img class="logo" src="${logoDataUrl}" alt="logo"/>` : ''}
//         <div class="title">${escapeHtml(title)}</div>
//         <div class="date">Generated on: ${fmtDate()}</div>
//         <div class="rule"></div>
//       </div>
//       ${tableHtml}
//     </div>

//     <div class="footer">
//       <span class="brand">Generated by iTax Easy Calculator</span> — <span class="pnums"></span>
//     </div>

//     <script>
//       // Trigger print then close (user will choose "Save as PDF")
//       window.onload = function() {
//         setTimeout(function(){ window.print(); }, 150);
//       };
//       window.onafterprint = function() {
//         // Close the tab if it was opened by script (best effort)
//         try { window.close(); } catch(e) {}
//       };
//     </script>
//   </body>
// </html>`;
//   };

//   const exportPdf = async () => {
//     // 1) inline logo as data URL (optional)
//     const logoDataUrl = await toDataUrl('/logo.png'); // put your logo at /public/logo.png
//     // 2) build tiled watermark
//     const wmDataUrl = buildWatermarkDataUri('iTax-Easy');

//     // 3) open a print tab and stream HTML into it
//     const w = window.open('', '_blank', 'noopener,noreferrer,width=900,height=1200');
//     if (!w) return;
//     const html = buildHtml({ logoDataUrl, wmDataUrl });
//     w.document.open();
//     w.document.write(html);
//     w.document.close();
//     // give the new doc a friendly title so the PDF suggests it
//     try { w.document.title = fileName.replace(/\.pdf$/i,''); } catch {}
//   };

//   return (
//     <Button onClick={exportPdf} size="sm">
//       Download PDF
//     </Button>
//   );
// }








'use client';

import React from 'react';
import Button from '@/components/ui/Button';

export default function PrintPdfButton({
  // what to print (choose one; priority: getContentHtml > results > contentRef/selector)
  results,                 // e.g. [{label:'Principal', value:'₹ 1,00,000'}, ...]
  contentRef,              // React ref to an element on the page
  selector,                // CSS selector (e.g. "#tableId")
  getContentHtml,          // () => string (inner HTML to print)

  // presentation
  title = 'Calculation Results',
  fileName = 'document',   // suggested document name (print dialog)
  logo = '/logo.png',      // optional; set '' to hide
  watermark = 'iTax-Easy', // set '' to disable watermark
  footerText = 'Generated by iTax Easy Calculator',
  extraCss = '',           // optional extra CSS to inject

  // behavior
  closeAfterPrint = true,
  buttonText = 'Download PDF',
  size = 'sm',
  className,
}) {
  // ---------- utils ----------
  const toDataUrl = async (url) => {
    if (!url) return '';
    try {
      const abs = new URL(url, window.location.origin).href;
      const res = await fetch(abs, { cache: 'no-store' });
      const blob = await res.blob();
      const reader = new FileReader();
      return await new Promise((resolve, reject) => {
        reader.onloadend = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    } catch {
      return '';
    }
  };

  const escapeHtml = (s = '') =>
    String(s)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;');

  const buildWatermarkDataUri = (text = 'iTax-Easy') => {
    if (!text) return '';
    const svg = `
      <svg xmlns='http://www.w3.org/2000/svg' width='280' height='180'>
        <defs>
          <linearGradient id='g' x1='0' x2='1' y1='0' y2='1'>
            <stop offset='0' stop-color='rgb(186,230,253)' stop-opacity='0.20'/>
            <stop offset='1' stop-color='rgb(186,230,253)' stop-opacity='0.20'/>
          </linearGradient>
        </defs>
        <rect width='100%' height='100%' fill='transparent'/>
        <g transform='rotate(-30,140,90)'>
          <text x='20' y='95' font-family='Arial, Helvetica, sans-serif' font-size='34' fill='url(#g)'>
            ${escapeHtml(text)}
          </text>
        </g>
      </svg>`;
    return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;
  };

  const fmtDate = (d = new Date()) =>
    new Date(d).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' });

  // ---------- content builders ----------
  const tableFromResults = () => {
    if (!Array.isArray(results) || !results.length) return '';
    const rows = results
      .map((r) => {
        const label = escapeHtml(r.label ?? '');
        const value = escapeHtml(r.value ?? '');
        const isStrong = /total|final/i.test(label);
        return `<tr><td>${label}</td><td class="val ${isStrong ? 'strong' : ''}">${value}</td></tr>`;
      })
      .join('');
    return `
      <table class="tbl">
        <thead><tr><th>Description</th><th>Value</th></tr></thead>
        <tbody>${rows}</tbody>
      </table>`;
  };

  const cloneFromDom = () => {
    // priority: contentRef > selector
    const node = contentRef?.current || (selector ? document.querySelector(selector) : null);
    if (!node) return '<div class="empty">No data</div>';
    // Shallow sanitize by forbidding scripts in the cloned subtree
    const html = node.cloneNode(true);
    html.querySelectorAll('script').forEach((s) => s.remove());
    return `<div class="html-wrap">${html.outerHTML}</div>`;
  };

  const resolveContentHtml = () => {
    if (typeof getContentHtml === 'function') {
      const html = String(getContentHtml() ?? '');
      return html.trim() ? html : '<div class="empty">No data</div>';
    }
    const table = tableFromResults();
    if (table) return table;
    return cloneFromDom();
  };

  const buildCss = (wmDataUrl) => `
    @page { size: A4; margin: 14mm; }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      font: 12.5px/1.35 "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      color: #111827;
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
    .wm {
      position: fixed;
      inset: 0;
      ${wmDataUrl ? `background-image: url('${wmDataUrl}');` : ''}
      background-size: 280px 180px;
      background-repeat: repeat;
      z-index: -1;
    }
    .sheet { width: 100%; }
    .header { text-align: center; margin-bottom: 10px; }
    .logo { height: 28px; display: inline-block; margin-top: 6px; }
    .title { font-size: 16px; font-weight: 700; margin: 10px 0 4px; }
    .date { font-size: 10px; color: #6b7280; margin-bottom: 8px; }
    .rule { height: 1px; background: #e5e7eb; border: 0; margin: 8px 0 12px; }

    .tbl { width: 100%; border-collapse: collapse; }
    .tbl thead th {
      background: #2980b9;
      color: #fff;
      text-align: left;
      font-weight: 700;
      padding: 6px 8px;
      border: 1px solid #d0d7de;
    }
    .tbl td {
      border: 1px solid #e5e7eb;
      padding: 6px 8px;
      vertical-align: top;
    }
    .tbl td.val { text-align: right; }
    .tbl tbody tr:nth-child(odd) td { background: #f9fafb; }
    .strong { font-weight: 700; }

    .html-wrap table { width: 100%; border-collapse: collapse; }
    .html-wrap th, .html-wrap td { border: 1px solid #e5e7eb; padding: 6px 8px; }

    .footer {
      position: fixed;
      bottom: 8mm; left: 0; right: 0;
      text-align: center;
      font-size: 10px; color: #9ca3af;
    }
    .footer .pnums:after { content: counter(page) " / " counter(pages); }
    .brand { color: #64748b; }

    .empty {
      text-align: center;
      color: #9ca3af;
      border: 1px dashed #e5e7eb;
      padding: 16px;
      border-radius: 8px;
    }

    @media print { .noprint { display: none !important; } }

    ${extraCss || ''}
  `;

  const buildHtml = ({ logoDataUrl, wmDataUrl }) => {
    const contentHtml = resolveContentHtml();
    const css = buildCss(wmDataUrl);
    return `<!doctype html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>${escapeHtml(fileName)}</title>
    <style>${css}</style>
  </head>
  <body>
    <div class="wm"></div>
    <div class="sheet">
      <div class="header">
        ${logoDataUrl ? `<img class="logo" src="${logoDataUrl}" alt="logo"/>` : ''}
        <div class="title">${escapeHtml(title)}</div>
        <div class="date">Generated on: ${fmtDate()}</div>
        <div class="rule"></div>
      </div>
      ${contentHtml}
    </div>

    <div class="footer">
      <span class="brand">${escapeHtml(footerText)}</span> — <span class="pnums"></span>
    </div>

    <script>
      // Trigger print then (optionally) close
      window.onload = function() { setTimeout(function(){ window.print(); }, 150); };
      window.onafterprint = function() {
        ${closeAfterPrint ? 'try { window.close(); } catch(e) {}' : ''}
      };
    </script>
  </body>
</html>`;
  };

  // ---------- main action ----------
  const exportPdf = async () => {
    const [logoDataUrl, wmDataUrl] = await Promise.all([
      toDataUrl(logo),
      Promise.resolve(buildWatermarkDataUri(watermark)),
    ]);

    const win = window.open('', '_blank', 'noopener,noreferrer,width=900,height=1200');
    if (!win) return;

    const html = buildHtml({ logoDataUrl, wmDataUrl });
    win.document.open();
    win.document.write(html);
    win.document.close();
    try { win.document.title = fileName.replace(/\.pdf$/i, ''); } catch {}
  };

  return (
    <Button onClick={exportPdf} size={size} className={className}>
      {buttonText}
    </Button>
  );
}
